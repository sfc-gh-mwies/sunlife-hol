use role accountadmin;
create database if not exists admin_db;
create or replace database SNOWPARK_HOL_DB;
create schema if not exists SNOWPARK_HOL_DB.RAW_CUSTOMER;
create schema if not exists SNOWPARK_HOL_DB.RAW_POS;
create schema if not exists SNOWPARK_HOL_DB.HARMONIZED;
create schema if not exists SNOWPARK_HOL_DB.ANALYTICS;
CREATE ROLE IF NOT EXISTS SNOWPARK_HOL_ROLE;
GRANT ROLE SNOWPARK_HOL_ROLE TO ROLE SYSADMIN;
create or replace warehouse SNOWPARK_HOL_VWH warehouse_size = 'Large' MAX_CLUSTER_COUNT = 5;
create or replace warehouse SNOWPARK_OPTIMIZED_HOL_VWH warehouse_type = 'SNOWPARK-OPTIMIZED' warehouse_size = 'MEDIUM' auto_suspend = 900;
grant usage on warehouse SNOWPARK_HOL_VWH to role SNOWPARK_HOL_ROLE;
grant usage on warehouse SNOWPARK_OPTIMIZED_HOL_VWH to role SNOWPARK_HOL_ROLE;
GRANT USAGE ON DATABASE SNOWPARK_HOL_DB TO ROLE SNOWPARK_HOL_ROLE;
GRANT OWNERSHIP ON SCHEMA SNOWPARK_HOL_DB.ANALYTICS TO ROLE SNOWPARK_HOL_ROLE;
GRANT OWNERSHIP ON SCHEMA SNOWPARK_HOL_DB.HARMONIZED TO ROLE SNOWPARK_HOL_ROLE;
GRANT USAGE ON SCHEMA SNOWPARK_HOL_DB.RAW_CUSTOMER TO ROLE SNOWPARK_HOL_ROLE;
GRANT USAGE ON  SCHEMA SNOWPARK_HOL_DB.RAW_POS TO ROLE SNOWPARK_HOL_ROLE;
GRANT SELECT ON FUTURE TABLES IN DATABASE SNOWPARK_HOL_DB TO ROLE SNOWPARK_HOL_ROLE;
GRANT EXECUTE TASK ON ACCOUNT TO ROLE SNOWPARK_HOL_ROLE;
GRANT CREATE DATABASE ON ACCOUNT TO ROLE SNOWPARK_HOL_ROLE;
GRANT CREATE WAREHOUSE ON ACCOUNT TO ROLE SNOWPARK_HOL_ROLE;
GRANT CREATE INTEGRATION ON ACCOUNT TO ROLE SNOWPARK_HOL_ROLE;
GRANT CREATE GIT REPOSITORY ON ACCOUNT TO ROLE SNOWPARK_HOL_ROLE;
CREATE OR REPLACE TABLE SNOWPARK_HOL_DB.RAW_CUSTOMER.CUSTOMER_LOYALTY AS
SELECT * FROM MASTERCLASS_DATA_ENGINEERING.RAW_CUSTOMER.CUSTOMER_LOYALTY;
CREATE OR REPLACE TABLE SNOWPARK_HOL_DB.RAW_POS.COUNTRY AS
  SELECT * FROM MASTERCLASS_DATA_ENGINEERING.RAW_POS.COUNTRY;
CREATE OR REPLACE TABLE SNOWPARK_HOL_DB.RAW_POS.FRANCHISE AS
  SELECT * FROM MASTERCLASS_DATA_ENGINEERING.RAW_POS.FRANCHISE;
CREATE OR REPLACE TABLE SNOWPARK_HOL_DB.RAW_POS.LOCATION AS
  SELECT * FROM MASTERCLASS_DATA_ENGINEERING.RAW_POS.LOCATION;
CREATE OR REPLACE TABLE SNOWPARK_HOL_DB.RAW_POS.MENU AS
  SELECT * FROM MASTERCLASS_DATA_ENGINEERING.RAW_POS.MENU;
CREATE OR REPLACE TABLE SNOWPARK_HOL_DB.RAW_POS.ORDER_DETAIL AS
  SELECT * FROM MASTERCLASS_DATA_ENGINEERING.RAW_POS.ORDER_DETAIL
    WHERE ORDER_TS < '2021-12-01 00:00:00.000'::timestamp;
CREATE OR REPLACE TABLE SNOWPARK_HOL_DB.RAW_POS.ORDER_DETAIL_INCREMENTAL AS
  SELECT * FROM MASTERCLASS_DATA_ENGINEERING.RAW_POS.ORDER_DETAIL
    WHERE ORDER_TS >= '2021-12-01 00:00:00.000'::timestamp;
INSERT INTO SNOWPARK_HOL_DB.RAW_POS.ORDER_DETAIL
    SELECT * FROM SNOWPARK_HOL_DB.RAW_POS.ORDER_DETAIL_INCREMENTAL;
CREATE OR REPLACE TABLE SNOWPARK_HOL_DB.RAW_POS.ORDER_HEADER AS
  SELECT * FROM MASTERCLASS_DATA_ENGINEERING.RAW_POS.ORDER_HEADER;
CREATE OR REPLACE TABLE SNOWPARK_HOL_DB.RAW_POS.TRUCK AS
  SELECT * FROM MASTERCLASS_DATA_ENGINEERING.RAW_POS.TRUCK;
ALTER TABLE SNOWPARK_HOL_DB.RAW_CUSTOMER.CUSTOMER_LOYALTY SET CHANGE_TRACKING = True;
ALTER TABLE SNOWPARK_HOL_DB.RAW_POS.COUNTRY SET CHANGE_TRACKING = True;
ALTER TABLE SNOWPARK_HOL_DB.RAW_POS.FRANCHISE SET CHANGE_TRACKING = True;
ALTER TABLE SNOWPARK_HOL_DB.RAW_POS.LOCATION SET CHANGE_TRACKING = True;
ALTER TABLE SNOWPARK_HOL_DB.RAW_POS.MENU SET CHANGE_TRACKING = True;
ALTER TABLE SNOWPARK_HOL_DB.RAW_POS.ORDER_DETAIL SET CHANGE_TRACKING = True;
ALTER TABLE SNOWPARK_HOL_DB.RAW_POS.ORDER_HEADER SET CHANGE_TRACKING = True;
ALTER TABLE SNOWPARK_HOL_DB.RAW_POS.TRUCK SET CHANGE_TRACKING = True;

-- THIS IS A STORED PROCEDURE WHICH CAN BE USE TO CREATE 'n' USERS
-- DOUBLE CHECK THAT THE CREATE STATEMENT ITSELF IS SUITABLE FOR YOUR PURPOSE Ex. USER NAMES WILL ALL BE "HOL_USER_n"
CREATE OR REPLACE PROCEDURE create_n_users(n INT, password STRING, default_wh STRING, default_db STRING, default_schema STRING, default_role STRING)
  RETURNS STRING
  LANGUAGE PYTHON
  RUNTIME_VERSION = 3.8
  HANDLER = 'create_users'
  PACKAGES = ('snowflake-snowpark-python', 'joblib')
AS $$
def create_users(session, n, password, default_wh, default_db, default_schema, default_role):
  result = ''
  for i in range(1, n+1):
    unum = (f'{i:02}')
    uname = ("HOL_USER_{}".format(unum))
    create_statement = 'CREATE OR REPLACE USER {un} PASSWORD = \'{pw}\' LOGIN_NAME = {un} DISPLAY_NAME = {un} MUST_CHANGE_PASSWORD = TRUE DEFAULT_WAREHOUSE = {wh} DEFAULT_NAMESPACE = {db}.{sc} DEFAULT_ROLE = {ro}'.format(
        un=uname, pw=password, wh=default_wh, db=default_db, sc=default_schema, ro=default_role)
    result = result + str(session.sql(create_statement).collect()) + '\n'
    grant_role_statement = 'GRANT ROLE {ro} to user {un}'.format(ro=default_role, un=uname)
    session.sql(grant_role_statement).collect()
  return result
$$;

-- CHANGE THER FIRST PARAMETER IN THIS CALL FUNCTION TO THE NUMBER OF USERS YOU WISH TO CREATE
-- call create_n_users(3,'Welcome1234!', 'SNOWPARK_HOL_VWH','SNOWPARK_HOL_DB','ANALYTICS','SNOWPARK_HOL_ROLE');
